* Blacklist
    Получение данных реестра Роскомнадзора.
    Необходимое ПО:
    * Rebar (https://github.com/rebar/rebar)
    * Erlang/OTP >= 17.0 (http://www.erlang.org/download.html)
    * Для сборки релиза потребуется relx (https://github.com/erlware/relx)

** Параметры конфигурации
    Для запуска приложения необходимо иметь файл запроса и файл с подписью.
    Все параметры указываются в файле app.config. Журналы работы сервера, 
    по-умолчанию находятся в каталоге var/log/rkn_registry/
    Параметры которые необходимо изменить:
    * dump_format_ver - версия формата реестра, "1.0" или "2.0", по умолчанию "2.0"
    * get_last_update_period - периодичность проверки актуальности реестра, в секундах
    * xml - путь до файла с XML запросом, к примеру "/etc/rkn_registry/request.xml"
    * sign - путь до файла с подписью запроса, к примеру "/etc/rkn_registry/sign.bin"
    * www_log_path - пусть до каталога содеражащего журналы web сервера, по-умолчанию "/var/log/rkn_registry/www/"
    * trace - путь до файла с трассировкой событий, к примеру "/var/log/rkn_registry/process.log"
    * doc_root - путь до каталога с приложением , к примеру "/opt/app"
    * port - порт , который будет слушать web сервер, к примеру 8899
    * listen_on - IPv4 адрес который будет слушать web сервер, к примеру 127.0.0.1
    * hostname - имя виртуального хоста
    * dump_csv - делать дамп в csv при обновлении реестра, true или false
    * csv_file - путь до файла, в который будет производиться CSV дамп, к примеру "/opt/rkn_registry/priv/dump.csv"
    * csv_separator - разделитель полей для CSV, к примеру ";"
    * csv_fields - имена полей которые будут присутствовать в дампе. 
    Необходимо указать одно из или все поля:
	* id
	* entryType
	* includeTime
	* ip
	* subnet
	* domain
	* decision
	* url
      , к примеру [id,decision,url,domain,ip].
     Порядок следования полей в файле, будет таким же как порядок имен полей в конфигурации.

** Запуск приложения
   #+BEGIN_EXAMPLE Shell
   cd application/directory
   make
    ./registry.sh start
   #+END_EXAMPLE
   или
   #+BEGIN_EXAMPLE Shell
   cd application/directory
   make
    ./dev_start.sh
   #+END_EXAMPLE
   А затем http://localhost:<port_number>/data.yaws?act=<ACTION>, где
   ACTION =
	* list - дамп в формате JSON
	* list&field = [ip | domain | org | date | decision | subnet | id | includeTime ] & value=<ЗНАЧЕНИЕ> - дамп с фильтрацией по значению указанного поля
	* status - статус сервера в формате JSON
	* list_only&field = [ip | domain | org | date | decision | subnet | id | includeTime | entryType] - вывод только указанного поля (данные дедуплицируются!)
	* dump_last_zip - получение последнего скачанного архива
	* dump_last_csv - получение последнего CSV дампа
	* dump_last_xml - получение последнего XML файла с реестром


** Запуск из Erlang REPL
   Запуск сервера:
   #+BEGIN_EXAMPLE Erlang
    registry:start(XMLRequestFile, SignFile).
   #+END_EXAMPLE
   Пример:
   #+BEGIN_EXAMPLE Erlang
    registry:start("priv/request.xml", "priv/request.bin").
   #+END_EXAMPLE
   Статус сервера:
   #+BEGIN_EXAMPLE Erlang
    registry:status().
   #+END_EXAMPLE
   Пример:
   #+BEGIN_EXAMPLE Erlang
    registry:status().

    [{"XMLRequest","priv/request.xml"},
     {"XMLRequestSign","priv/request.bin"},
     {"lastDumpDate","16-May-2014, 06:04"},
     {"NextAction","send_req"},
     {"UpdateCounter",2},
     {"LastError",[]},
     {"CodeString",[]},
     {"LastTryCount",1}]
   #+END_EXAMPLE
